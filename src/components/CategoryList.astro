---
import { Image } from "@astrojs/image/components";
import { Icon } from "astro-icon";
import { getCollection } from "astro:content";
const { category } = Astro.props;

const recipeEntries = await getCollection("recipes", ({ id }) =>
  id.startsWith(category)
);

// capitalize first letter
const categoryTitle = category.charAt(0).toUpperCase() + category.slice(1);
---

<div class="recipe-wrapper">
  <h2>{categoryTitle}</h2>
  <ul role="list">
    {
      recipeEntries.map((recipe) => (
        <li>
          <article>
            <figure>
              <Image
                src={recipe.data.img}
                width={300}
                aspectRatio={16 / 9}
                format={"avif"}
                fit={"cover"}
                loading={"eager"}
                alt=""
              />
              <p>
                <Icon name="lucide:clock" width={18} />
                <span>{recipe.data.time} min.</span>
              </p>
            </figure>
            <a href={`/opskrifter/${recipe.slug}/`}>{recipe.data.title}</a>
          </article>
        </li>
      ))
    }
  </ul>
</div>

<style>
  @layer components {
    .recipe-wrapper {
      display: grid;
      /* gap: var(--space-sm); */
      padding-block: var(--space-md);

      container: category / inline-size;
    }

    ul {
      display: grid;
      grid-template-columns: repeat(
        auto-fill,
        minmax(min(100%, 110px + 15cqw), 1fr)
      );
      gap: var(--space-md);
    }
    article {
      --padding: min(4cqw, var(--space-md));
      --neg-padding: calc(var(--padding) * -1);
      position: relative;
      padding: var(--padding);
      background: #fff;
      border-radius: var(--border-radius-lg);
      overflow: hidden;
      block-size: 100%;
      box-shadow: #fff 0 0, #3341551a 0 0 0 1px, #0000000d 0 20px 25px -5px,
        #0000000d 0 8px 10px -6px;
    }

    h2 {
      padding-block-end: var(--space-sm);
      margin-bottom: var(--space-md);
      border-bottom: 1px solid var(--gray-300);
    }

    figure {
      display: grid;
      width: calc(100% + (var(--padding) * 2));
      margin: var(--neg-padding) var(--neg-padding) var(--padding);
      background: linear-gradient(to top, hsl(0 0% 0% / 80%), #0000) 0 100% /
        100% 60% no-repeat;
      isolation: isolate;
    }

    figure > * {
      grid-area: 1 / 1;
    }

    img {
      mix-blend-mode: color-dodge;
    }

    p {
      place-self: end start;
      display: flex;
      gap: var(--space-xxs);
      align-items: center;
      margin: var(--space-xxs);
      font-weight: 400;
      color: #fff;
      font-size: var(--size-step--1);
    }

    a {
      color: var(--text-body);
      font-weight: 500;
      text-decoration: none;
      line-height: 1.25;
    }

    a::before {
      content: "";
      position: absolute;
      inset: 0;
    }

    /* List view */
    [data-view="list"] {
      padding-block: var(--space-lg);
    }

    [data-view="list"] ul {
      grid: revert;
      /* list-style: revert;
      padding-inline-start: 1em; */
    }

    [data-view="list"] figure {
      display: none;
    }

    [data-view="list"] article {
      /* background: none;
      box-shadow: none;*/
      padding: var(--space-sm) var(--space-md);
    }
  }
</style>

<script>
  const recipeList = document.querySelectorAll(".recipe-wrapper");
  const toogleBtn = document.querySelector(".toggle-view");

  toogleBtn?.addEventListener("click", () => {
    toogleBtn.setAttribute(
      "aria-pressed",
      toogleBtn.getAttribute("aria-pressed") === "true" ? "false" : "true"
    );
    recipeList.forEach((list) => {
      list.dataset.view = list.dataset.view === "list" ? "grid" : "list";
    });
  });
</script>
