---
import { Image } from "@astrojs/image/components";
import { Icon } from "astro-icon";
import RecipeCard from "./RecipeCard.astro";
import { getCollection } from "astro:content";
const { category } = Astro.props;

const recipeEntries = await getCollection("recipes", ({ id }) =>
  id.startsWith(category)
);

// sort recipeEntries by alphabetical order
const sortedEntries = recipeEntries.sort((a, b) => {
  const titleA = a.data.title.toUpperCase();
  const titleB = b.data.title.toUpperCase();
  if (titleA < titleB) {
    return -1;
  }
  if (titleA > titleB) {
    return 1;
  }
  return 0;
});

// capitalize first letter
const categoryTitle = category.charAt(0).toUpperCase() + category.slice(1);
---

<div class="category-wrapper" data-view="grid">
  <h2>{categoryTitle}</h2>
  <ul role="list">
    {
      sortedEntries.map((recipe) => (
        <li>
          <RecipeCard {recipe} />
        </li>
      ))
    }
  </ul>
</div>
<!-- <div class="category-wrapper" data-view="grid">
  <h2>{categoryTitle}</h2>
  <ul role="list">
    {
      sortedEntries.map((recipe) => (
        <li>
          <article>
            <figure>
              <Image
                src={recipe.data.img}
                width={300}
                aspectRatio={16 / 9}
                format={"avif"}
                fit={"cover"}
                loading={"eager"}
                alt=""
              />
              {
                recipe.data.time && (
                  <p>
                    <Icon name="lucide:clock" width={18} />
                    <span>{recipe.data.time} min.</span>
                  </p>
                )
              }
            </figure>
            <a href={`/opskrifter/${recipe.slug}/`}>{recipe.data.title}</a>
          </article>
        </li>
      ))
    }
  </ul>
</div> -->

<style>
  @layer components {
    .category-wrapper {
      display: grid;
      /* gap: var(--space-sm); */
      padding-block: var(--space-xl);

      container: category / inline-size;
    }

    ul {
      display: grid;
      grid-template-columns: repeat(
        auto-fill,
        minmax(min(100%, 110px + 15cqw), 1fr)
      );
      gap: var(--space-md);
    }

    h2 {
      padding-block-end: var(--space-sm);
      /* margin-bottom: var(--space-md); */
      /* border-bottom: 1px solid var(--gray-300); */
      max-width: none;
    }

    /* List view */
    [data-view="list"]:not(nth-child(1 of [data-view])) {
      padding-block: var(--space-md);
    }

    [data-view="list"] ul {
      grid: revert;
      /* list-style: revert;
      padding-inline-start: 1em; */
    }

    [data-view="list"] :global(figure) {
      block-size: 0;
      /* background: none; */
    }
    [data-view="list"] :global(img) {
      block-size: 0;
    }

    [data-view="list"] :global(article) {
      /* background: none;
      box-shadow: none;*/
      padding: var(--space-sm) var(--space-md);
    }
  }
</style>

<script>
  import { gsap } from "gsap";
  import { Flip } from "gsap/Flip";

  gsap.registerPlugin(Flip);

  const categoryWrapper = document.querySelectorAll(".category-wrapper");
  const toogleBtn = document.querySelector(".toggle-view");

  toogleBtn?.addEventListener("click", () => {
    toogleBtn.setAttribute(
      "aria-pressed",
      toogleBtn.getAttribute("aria-pressed") === "true" ? "false" : "true"
    );
    categoryWrapper.forEach((list) => {
      const state = Flip.getState(
        ".category-wrapper, .category-wrapper li, .category-wrapper h2, .category-wrapper figure, .category-wrapper img"
      );

      list.dataset.view = list.dataset.view === "grid" ? "list" : "grid";
      Flip.from(state, {
        duration: 0.3,
        nested: true,
        ease: "power1.inOut",
      });
    });
  });
</script>
